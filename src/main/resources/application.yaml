spring:
  application:
    name: gateway
  cloud:
    gateway:
      default-filters:
        - TokenRelay
      routes:
        - id: log
          uri: http://${nameOrDockerIP}:8081
          predicates:
            - Path=/api/log/**
          filters:
            - StripPrefix=0
        - id: registry
          uri: http://${nameOrDockerIP}:8082
          predicates:
            - Path=/api/registry/**
          filters:
            - StripPrefix=0
  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: http://${nameOrDockerIP}:8080/auth/realms/biro/protocol/openid-connect/certs
      client:
        provider:
          my-keycloak-provider:
            issuer-uri: http://${nameOrDockerIP}:8080/auth/realms/biro
            # Individual properties can also be provided this way
            #            token-uri: http://localhost:8080/auth/realms/amrutrealm/protocol/openid-connect/token
            #            authorization-uri: http://localhost:8080/auth/realms/biro/protocol/openid-connect/auth
            #            userinfo-uri: http://localhost:8080/auth/realms/amrutrealm/protocol/openid-connect/userinfo
            #            user-name-attribute: preferred_username
        registration:
          keycloak-spring-gateway-client:
            provider: my-keycloak-provider
#            scope: openid
            client-id: spring-gateway-application
            client-secret: b8cba1c6-faf0-4104-81ba-b6748d7aacd9
            authorization-grant-type: authorization_code
            redirect-uri: "{baseUrl}/login/oauth2/code/keycloak"

logging:
  level:
    org:
      springframework:
        security:
          web: DEBUG

server:
  port: 9090

management:
  endpoints:
    web:
      exposure:
        include: "*"

eureka:
  client:
    service-url:
      defaultZone: http://${nameOrDockerIP}:8761/eureka
    fetch-registry: true
    registry-fetch-interval-seconds: 10